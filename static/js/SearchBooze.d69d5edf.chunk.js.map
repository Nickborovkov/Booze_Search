{"version":3,"sources":["assets/images/imagePlaceholder.jpg","components/searchBooze/BoozeItem.jsx","components/common/searchField/SearchField.jsx","components/searchBooze/SearchBooze.jsx"],"names":["BoozeItem","item","Grid","xs","md","lg","xl","sx","margin","to","idDrink","style","textDecoration","Card","CardMedia","component","height","image","strDrinkThumb","imagePlaceholder","alt","CardContent","Typography","gutterBottom","variant","strDrink","SearchField","searchType","items","redirectIngredient","setItems","validationSchema","yup","shape","required","max","matches","initialValues","validateOnBlur","onSubmit","values","errors","handleChange","handleBlur","handleReset","handleSubmit","isValid","dirty","container","justifyContent","width","TextField","error","label","name","value","onChange","onClick","e","target","fullWidth","size","color","onBlur","helperText","Box","Button","disabled","type","display","SearchBooze","dispatch","useDispatch","boozeList","useSelector","state","booze","isLoading","common","useState","cocktail","setCocktail","useEffect","getCocktailsByName","getCocktailsByIngredient","window","scrollTo","align","mt","mb","spacing","map","Skeleton","animation"],"mappings":"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","file":"static/js/SearchBooze.d69d5edf.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/imagePlaceholder.3d378c83.jpg\";","import React from \"react\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardMedia from \"@mui/material/CardMedia\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport imagePlaceholder from \"../../assets/images/imagePlaceholder.jpg\"\r\n\r\nconst BoozeItem = ({item}) => {\r\n    return (\r\n        <Grid\r\n            item\r\n            xs={12} md={6} lg={4} xl={3}\r\n            sx={{margin: `10px`}}\r\n        >\r\n            <NavLink\r\n                to={`/cocktails/cocktail/${item.idDrink}`}\r\n                style={{textDecoration: `none`}}\r\n            >\r\n                <Card>\r\n                    <CardMedia\r\n                        component=\"img\"\r\n                        height=\"400\"\r\n                        image={item.strDrinkThumb || imagePlaceholder}\r\n                        alt=\"drinkImage\"\r\n                    />\r\n                    <CardContent>\r\n                        <Typography\r\n                            gutterBottom\r\n                            variant=\"h5\"\r\n                            component=\"div\"\r\n                        >\r\n                            {item.strDrink}\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Card>\r\n            </NavLink>\r\n        </Grid>\r\n\r\n    )\r\n}\r\n\r\nexport default BoozeItem\r\n","import React from \"react\";\r\nimport {Formik} from \"formik\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Button from \"@mui/material/Button\";\r\nimport * as yup from 'yup'\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Box from \"@mui/material/Box\";\r\n\r\nconst SearchField = ({searchType, items, redirectIngredient, setItems}) => {\r\n\r\n    const regexp = /^[a-zA-Z0-9_., -]*$/\r\n\r\n    const validationSchema = yup.object().shape({\r\n        items: yup\r\n            .string()\r\n            .required(`Field can't be empty`)\r\n            .max(150, `Max length is1 50 symbols`)\r\n            .matches(regexp, `Only english letters and digits`)\r\n    })\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                items: redirectIngredient ? redirectIngredient : items\r\n            }}\r\n            validateOnBlur\r\n            onSubmit={((values) => {\r\n                setItems(values.items)\r\n            })}\r\n            validationSchema={validationSchema}\r\n        >\r\n            {({\r\n                  values, errors, handleChange, handleReset,\r\n                  handleBlur, handleSubmit, isValid, dirty\r\n              }) => (\r\n                <form>\r\n                    <Grid container\r\n                          justifyContent=\"center\"\r\n                          sx={{width: `80%`, margin: `50px auto`}}\r\n                    >\r\n                        <Grid item xs={12} md={10}>\r\n                            <TextField\r\n                                error={errors.items ? true : false}\r\n                                label={errors.items || `Search for cocktails`}\r\n                                variant=\"outlined\"\r\n                                name='items'\r\n                                value={values.items}\r\n                                onChange={handleChange}\r\n                                onClick={ (e) => e.target.value = `` }\r\n                                fullWidth\r\n                                size='small'\r\n                                color={`input`}\r\n                                onBlur={handleBlur}\r\n                                helperText={searchType === `byIngredient` ? `Requires full ingredient name` : ``}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} md={2}>\r\n                            <Box>\r\n                                <Button\r\n                                    disabled={!isValid && !dirty}\r\n                                    variant='contained'\r\n                                    color={'button'}\r\n                                    onClick={handleSubmit}\r\n                                    type='submit'\r\n                                    fullWidth\r\n                                    size='large'\r\n                                    sx={{display: `block`}}\r\n                                >\r\n                                    Search\r\n                                </Button>\r\n                            </Box>\r\n                        </Grid>\r\n                    </Grid>\r\n                </form>\r\n            )}\r\n\r\n        </Formik>\r\n    )\r\n}\r\n\r\nexport default SearchField\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getCocktailsByIngredient, getCocktailsByName} from \"../../store/boozeReducer\";\r\nimport BoozeItem from \"./BoozeItem\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Skeleton from \"@mui/material/Skeleton\";\r\nimport SearchField from \"../common/searchField/SearchField\";\r\n\r\nconst SearchBooze = ({searchType}) => {\r\n\r\n    //State\r\n    const dispatch = useDispatch()\r\n    const boozeList = useSelector(state => state.booze.boozeList)\r\n    const redirectIngredient = useSelector(state => state.booze.redirectIngredient)\r\n    const isLoading = useSelector(state => state.common.isLoading)\r\n    const error = useSelector(state => state.common.error)\r\n\r\n    //Set cocktails\r\n    const [cocktail, setCocktail] = useState(`rum`)\r\n\r\n    //Update cocktails\r\n    useEffect(() => {\r\n        if(searchType === `byName`){\r\n            dispatch(getCocktailsByName(cocktail))\r\n        }else if(searchType === `byIngredient`){\r\n            dispatch(getCocktailsByIngredient(cocktail))\r\n        }\r\n        window.scrollTo(-300, 0)\r\n    },[dispatch, cocktail, searchType])\r\n\r\n    //Setting Cocktails with ingredient from ingredients component\r\n    useEffect(()=>{\r\n        if(redirectIngredient){\r\n            dispatch(getCocktailsByIngredient(redirectIngredient))\r\n        }\r\n    },[dispatch, redirectIngredient])\r\n\r\n    return (\r\n        <Box>\r\n            {/*Title*/}\r\n            <Typography\r\n                variant=\"h3\"\r\n                align='center'\r\n                mt={3}\r\n                sx={{color: `#00e676`}}\r\n            >\r\n                {searchType === `byName` && `Search Cocktails By Name`}\r\n                {searchType === `byIngredient` && `Search Cocktails By Ingredient`}\r\n            </Typography>\r\n\r\n            {/*SearchField*/}\r\n            <SearchField\r\n                searchType={searchType}\r\n                items={cocktail}\r\n                redirectIngredient={redirectIngredient}\r\n                setItems={setCocktail}/>\r\n\r\n            {/*Error case*/}\r\n            {error &&\r\n            <Box mt={4} mb={4}>\r\n                <Typography\r\n                    variant=\"h3\"\r\n                    align='center'\r\n                    sx={{color: `#e53935`}}\r\n                >\r\n                    {error}\r\n                </Typography>\r\n            </Box>}\r\n\r\n            {/*Skeleton preloader*/}\r\n            {isLoading && !error &&\r\n            <Grid\r\n                container\r\n                spacing={2}\r\n                justifyContent=\"center\"\r\n                sx={{width: `80%`, margin: `50px auto`}}\r\n            >\r\n                {\r\n                    [1,2,3,4].map(item => <Grid key={item} item xs={12} md={6} lg={4} xl={3}>\r\n                        <Skeleton variant=\"rectangular\" height={400} animation=\"wave\"/>\r\n                    </Grid>)\r\n                }\r\n            </Grid>}\r\n\r\n            {/*Received items*/}\r\n            {!isLoading && boozeList && !error &&\r\n            <Grid\r\n                container\r\n                spacing={0}\r\n                justifyContent=\"center\"\r\n                sx={{width: `80%`, margin: `50px auto`}}\r\n            >\r\n                {\r\n                    boozeList.map(item =>\r\n                        <BoozeItem\r\n                            key={item.idDrink}\r\n                            item={item}\r\n                        />)\r\n                }\r\n            </Grid>}\r\n\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default SearchBooze\r\n"],"sourceRoot":""}